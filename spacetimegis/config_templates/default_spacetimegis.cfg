# -*- coding: utf-8 -*-

# ----------------------- TEMPLATE BEGINS HERE -----------------------

[core]
DEBUG = False
# The folder where SpacetimeGIS should store its log files
# This path must be absolute
BASE_LOG_FOLDER = {SPACETIMEGIS_HOME}/logs

# The SqlAlchemy connection string to the metadata database.
# SqlAlchemy supports many different database engine, more information
# their website
SQLALCHEMY_DATABASE_URI = sqlite:///{SPACETIMEGIS_HOME}/spacetimegis.db
# SQLALCHEMY_DATABASE_URI = 'mysql://myapp@localhost/myapp'
# SQLALCHEMY_DATABASE_URI = 'postgresql://root:password@localhost/myapp'
# SQLALCHEMY_DATABASE_URI = 'clickhouse://username:password@hostname:port/database'

SQLALCHEMY_TRACK_MODIFICATIONS = False

#
ENABLE_CORS = False

#
ENABLE_FLASK_COMPRESS = False

[celery]
# The app name that will be used by celery
celery_app_name = celery_executor

# The concurrency that will be used when starting workers with the
# "spacetimegis worker" command. This defines the number of task instances that
# a worker will take, so size up your workers based on the resources on
# your worker box and the nature of your tasks
worker_concurrency = 4

# The Celery broker URL. Celery supports RabbitMQ, Redis and experimentally
# a sqlalchemy database. Refer to the Celery documentation for more
# information.
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#broker-settings
broker_url = sqla+mysql://spacetimegis:spacetimegis@localhost:3306/spacetimegis

# The Celery result_backend. When a job finishes, it needs to update the
# metadata of the job. Therefore it will post a message on a message bus,
# or insert it into a database (depending of the backend)
# This status is used by the scheduler to update the state of the task
# The use of a database is highly recommended
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#task-result-backend-settings
result_backend = db+mysql://spacetimegis:spacetimegis@localhost:3306/spacetimegis

# Celery Flower is a sweet UI for Celery. SpacetimeGIS has a shortcut to start
# it `spacetimegis flower`. This defines the IP that Celery Flower runs on
flower_host = 0.0.0.0

# The root URL for Flower
# Ex: flower_url_prefix = /flower
flower_url_prefix =

# This defines the port that Celery Flower runs on
flower_port = 5555

# Securing Flower with Basic Authentication
# Accepts user:password pairs separated by a comma
# Example: flower_basic_auth = user1:password1,user2:password2
flower_basic_auth =

# Default queue that tasks get assigned to and that worker listen on.
default_queue = default

# How many processes CeleryExecutor uses to sync task state.
# 0 means to use max(1, number of cores - 1) processes.
sync_parallelism = 0

# In case of using SSL
ssl_active = False
ssl_key =
ssl_cert =
ssl_cacert =

# [celery_broker_transport_options]
# This section is for specifying options which can be passed to the
# underlying celery broker transport.  See:
# http://docs.celeryproject.org/en/latest/userguide/configuration.html#std:setting-broker_transport_options

# The visibility timeout defines the number of seconds to wait for the worker
# to acknowledge the task before the message is redelivered to another worker.
# Make sure to increase the visibility timeout to match the time of the longest
# ETA you're planning to use.
#
# visibility_timeout is only supported for Redis and SQS celery brokers.
# See:
#   http://docs.celeryproject.org/en/master/userguide/configuration.html#std:setting-broker_transport_options
#
#visibility_timeout = 21600

[webserver]
WEBSERVER_ADDRESS = 0.0.0.0

WEBSERVER_PORT = 9000

WORKERS = 2

WEBSERVER_TIMEOUT = 100

WEBSERVER_SOCKET =

[spark]
SPARK_HOME = 

MASTER = local[*]

APPNAME = spacetimegis

UI_ENABLED = False

URI_ADDRESS = 